"use strict";var async=require("async"),path=require("path"),fs=require("fs-extra"),imageSize=require("image-size"),jimp=require("jimp"),utilities=require("extra-utilities"),fileUtilities=require("file-utilities"),imageUtilities={},resizeImageFormat={type:"object",removeExtra:!0,nonEmpty:!0,order:!0,strict:!0,autopopulate:!0,required:!0,format:{source:{type:"string",trim:!0,nonEmpty:!0,required:!0},destination:{type:"string",trim:!0,nonEmpty:!0,required:!0},width:{type:"integer",required:!0,validator:function(value){return 0<value}},height:{type:"integer",required:!0,validator:function(value){return 0<value}},overwrite:{type:"boolean",default:!1},information:{type:"boolean",default:!0}}},resizeImageOptions={throwErrors:!0,verbose:!1};imageUtilities.getImageInformation=function(imageFilePath,callback){if(!utilities.isFunction(callback))throw new Error("Missing or invalid callback function!");return utilities.isEmptyString(imageFilePath)?callback(new Error("Missing or invalid image file path!")):async.waterfall([function(callback){return fileUtilities.getFileInformation(imageFilePath,function(error,info){return error?callback(error):callback(null,info)})},function(info,callback){return imageSize(imageFilePath,function(error,dimensions){return error?callback(error):callback(null,info,{width:dimensions.width,height:dimensions.height})})}],function(error,info,size){return error?callback(error):callback(null,utilities.merge(info,size))})},imageUtilities.resizeImage=function(options,callback){if(!utilities.isFunction(callback))throw new Error("Missing or invalid callback function!");try{options=utilities.formatValue(options,resizeImageFormat,resizeImageOptions)}catch(error){return callback(error)}return async.waterfall([function(callback){return fs.stat(options.source,function(error,sourceStats){return error?callback(error):sourceStats.isDirectory()?callback(new Error("Source image path cannot be a directory!")):callback(null,sourceStats)})},function(sourceStats,callback){return fs.stat(options.destination,function(error,destinationStats){return error&&"ENOENT"!==error.code?callback(error):(utilities.isEmptyString(path.extname(options.destination))&&(options.destination=path.join(options.destination,path.basename(options.source))),callback(null,sourceStats))})},function(sourceStats,callback){return fs.stat(options.destination,function(error,destinationStats){if(error&&"ENOENT"!==error.code)return callback(error);if(utilities.isValid(destinationStats)){if(sourceStats.ino===destinationStats.ino)return callback(new Error("Source and destination file are the same!"));if(!options.overwrite)return callback(new Error("Destination file already exists!"))}return callback()})},function(callback){var destinationPath=path.dirname(options.destination);return fs.mkdirs(destinationPath,function(error){return error?callback(error):callback()})},function(callback){return jimp.read(options.source,function(error,image){return error?callback(error):image.scaleToFit(options.width,options.height).write(options.destination,function(){return callback()})})},function(callback){return options.information?imageUtilities.getImageInformation(options.destination,function(error,information){return error?callback(error):callback(null,options.destination,information)}):callback(null,options.destination)}],function(error,filePath,information){return error?callback(error):callback(null,utilities.merge({path:filePath},information))})},module.exports=imageUtilities;